* A simple ocean model to demonstrate the use of a rate constant

See the Quickstart guide for an explanation what is being done
here. The main difference is in the following declaration (see below
in the Connection Chapter) which declares that the output flux has
linear dependency on the reservoir concentration, such that

f =  (c/C0 - 1) * k

where c denotes the reservoir concentration in the previous time step,
C0 the reference concentration, and k equals the rate constant. The
result is forced to be equal or larger than zero.

Note that this code makes no attempt to prevent you from shooting into
your own foot. I.e., if you forget to declare the rate, it will
automatically set the rate in such a way that it maintains steady
state, etc. etc.
#+BEGIN_SRC ipython
Connect(
    source=Ocean,           # source of flux
    sink=Carbonate_Burial,  # target of flux
    kvalue = 1000,          # the kvalue
    C0 =3,                  # the reference concentration
    rate = 18E12
)
#+END_SRC


*** Basic Parameters
#+BEGIN_SRC ipython :tangle rate_example.py
from esbmtk import Model, Element, Species, Reservoir
from esbmtk import Signal, Connect, Source, Sink, Flux
from esbmtk import ExternalData
import matplotlib.pyplot as plt

# create model
Model(
    name="test",        # model name
    stop=1000,          # end time of model
    time_unit="yr",     # time units 
    dt=1,               # time step
)

# Element properties
Element(
    name="C",                  # Element Name
    model=test,                # Model handle
    mass_unit="mmol",          # base mass unit
    li_label="C^{12$S",        # Name of light isotope
    hi_label="C^{13}$S",       # Name of heavy isotope
    d_label="$\delta^{13}$C",       # Name of isotope delta
    d_scale="VPDB",            # Isotope scale. End of plot labels
    r=0.0112372,  # VPDB C13/C12 ratio https://www-pub.iaea.org/MTCD/publications/PDF/te_825_prn.pdf
)

# add species
Species(name="CO2", element=C)    # Name & element handle
Species(name="DIC", element=C)    # Name & element handle
Species(name="CaCO3", element=C)  # Name & element handle
#+END_SRC

** Reservoir definitions

#+BEGIN_SRC ipython :tangle rate_example.py
Reservoir(
    name="Ocean",       # Name of reservoir
    species=DIC,        # Species handle
    delta=0,            # initial delta
    concentration=3,    # concentration 
    unit="mmol",        # mass unit
    volume=1.332E18,    # reservoir size (m^3)
)
#+END_SRC

** Setup inputs and outputs

#+BEGIN_SRC ipython :tangle rate_example.py
Source(name="Carbonate_Weathering", species=CO2)
Sink(name="Carbonate_Burial", species=CaCO3)
#+END_SRC

** Setup Signals
Here we use simple pyramidal signal
#+BEGIN_SRC ipython :tangle rate_example.py
Signal(
    name="P1",        # Name
    species=CO2,      # Element
    start=10,         # start
    duration=100,     # duration
    delta=1,          # isotope effect
    shape="pyramid",  # signal shape
    magnitude=1e17,   # magnitude or mass
)
#+END_SRC



** Connecting sources, reservoirs and sinks

#+BEGIN_SRC ipython :tangle rate_example.py
# connect source to reservoir
Connect(
    source=Carbonate_Weathering,  # source of flux
    sink=Ocean,                   # target of flux
    rate=18E12,                   # flux rate
    pl=[P1]                       # process list
)


Connect(
    source=Ocean,          # source of flux
    sink=Carbonate_Burial, # target of flux
    k_concentration = 1000,         # flux rate 
    ref_value =3,                 # reference concentration
    rate = 18E12,          # flux rate
    alpha = 0,             # isotope offset
)
#+END_SRC

** Run the model

#+BEGIN_SRC ipython :tangle rate_example.py
# Run the model
test.run()

# plot the results
test.plot_data()
#+END_SRC
